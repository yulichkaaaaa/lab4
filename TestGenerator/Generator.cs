using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace TestGenerator
{
    public class Generator
    {
        private List<string> texts;
 
        public List<OutputFileInfo> GenerateTestClasses(string text)
        {
            List<OutputFileInfo> outputs = new List<OutputFileInfo>();
            
                SyntaxNode root = CSharpSyntaxTree.ParseText(text).GetRoot();
                IEnumerable<ClassDeclarationSyntax> classes = root.DescendantNodes().OfType<ClassDeclarationSyntax>();
            foreach (ClassDeclarationSyntax cl in classes)
            {
                ClassDeclarationSyntax testClass = CreateTestClass(cl.Identifier.Text);
                IEnumerable<SyntaxNode> methods = cl.DescendantNodes()
                                                     .OfType<MethodDeclarationSyntax>()
                                                     .Where(method => method.Modifiers.Any(SyntaxKind.PublicKeyword));
                foreach (SyntaxNode method in methods)
                {
                    testClass = testClass.AddMembers(CreateTestMethod((method as MethodDeclarationSyntax).Identifier.ValueText));
                }
                CompilationUnitSyntax syntaxFactory = SyntaxFactory.CompilationUnit();
                NamespaceDeclarationSyntax @namespace = SyntaxFactory.NamespaceDeclaration(SyntaxFactory.ParseName("CodeGenerationSample")).NormalizeWhitespace();
                @namespace = @namespace.AddMembers(testClass);
                syntaxFactory = syntaxFactory.AddUsings(usingDirectives()).AddMembers(@namespace);
                string code = syntaxFactory.NormalizeWhitespace().ToFullString();
                OutputFileInfo info = new OutputFileInfo(testClass.Identifier.ValueText + ".cs", code);
                outputs.Add(info);
            }

            
            return outputs;
        }


        private ClassDeclarationSyntax CreateTestClass(string className)
        {
            AttributeListSyntax attributes = SyntaxFactory.AttributeList(SyntaxFactory.SingletonSeparatedList(
                        SyntaxFactory.Attribute(SyntaxFactory.IdentifierName("TestClass")))
                    ).NormalizeWhitespace();

            ClassDeclarationSyntax testClass = SyntaxFactory.ClassDeclaration("Test" + className);
            testClass = testClass.AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword)).AddAttributeLists(attributes);
            return testClass;
        }

        private MethodDeclarationSyntax CreateTestMethod(string methodName)
        {
            AttributeListSyntax attributes = SyntaxFactory.AttributeList(SyntaxFactory.SingletonSeparatedList(
                        SyntaxFactory.Attribute(SyntaxFactory.IdentifierName("TestMethod")))
                    ).NormalizeWhitespace();

            MethodDeclarationSyntax testMethod = SyntaxFactory.MethodDeclaration(SyntaxFactory.ParseTypeName("void"), "Test" + methodName);
            testMethod = testMethod.AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword)).AddAttributeLists(attributes).AddBodyStatements(SyntaxFactory.ParseStatement("Assert.Fail(\"autogenerated\");"));
            return testMethod;
        }

        private UsingDirectiveSyntax[] usingDirectives() {
            UsingDirectiveSyntax[] usings = { SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("System.Generics")),
                                              SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("Microsoft.VisualStudio.TestTools.UnitTesting")),
                                              SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("System.Linq")),
                                              SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("System.System"))};
            return usings;
        }
        
    }
}
